name: PR Spam Prevention

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files
        id: pr_files
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const fileNames = files.map(f => f.filename);
            const changedFiles = files.length;
            
            // Check if only README.md (or similar) is modified
            const onlyReadme = changedFiles === 1 && 
              (fileNames[0].toLowerCase() === 'readme.md' || 
               fileNames[0].toLowerCase() === 'readme.rst' ||
               fileNames[0].toLowerCase() === 'readme.txt' ||
               fileNames[0].toLowerCase() === 'contributors.md');
            
            // Get the patch/diff content
            const patches = files.map(f => f.patch || '').join('\n');
            
            core.setOutput('only_readme', onlyReadme);
            core.setOutput('changed_files', changedFiles);
            core.setOutput('file_names', fileNames.join(', '));
            core.setOutput('patches', patches);
            
            return { onlyReadme, changedFiles, fileNames, patches };

      - name: Analyze PR content for spam patterns
        id: spam_check
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const onlyReadme = '${{ steps.pr_files.outputs.only_readme }}' === 'true';
            const patches = `${{ steps.pr_files.outputs.patches }}`;
            const prBody = context.payload.pull_request.body || '';
            const prTitle = context.payload.pull_request.title || '';
            
            let isSpam = false;
            let spamReasons = [];
            
            // Pattern 1: Only README modified
            if (onlyReadme) {
              
              // Check for common spam patterns in the diff
              const spamPatterns = [
                // Just adding names/usernames
                /^\+.*?(?:name|username|contributor).*?:.*?[\w-]+\s*$/im,
                // Just adding markdown links with names
                /^\+.*?\[.*?\]\(https?:\/\/github\.com\/[\w-]+\).*?$/im,
                // Just adding list items with names/links
                /^\+[-*]\s*(?:\[.*?\]\(.*?\)|@?[\w-]+)\s*$/im,
                // Just adding table rows with names
                /^\+\|.*?\|.*?\|.*?$/im,
                // Just adding HTML comments with names
                /^\+<!--.*?-->\s*$/im,
                // Generic "added my name" pattern
                /add(?:ed|ing)?\s+(?:my|their)\s+name/i,
              ];
              
              // Check if changes match spam patterns
              const addedLines = patches.split('\n').filter(line => line.startsWith('+')).join('\n');
              const meaningfulChange = addedLines.length > 50; // At least some substantial content
              
              let matchesSpamPattern = false;
              for (const pattern of spamPatterns) {
                if (pattern.test(addedLines)) {
                  matchesSpamPattern = true;
                  break;
                }
              }
              
              // Check PR title and body for spam indicators
              const spamTitlePatterns = [
                /add(?:ed|ing)?\s+name/i,
                /add(?:ed|ing)?\s+(?:my|their)\s+name/i,
                /update.*?readme/i,
                /contributor/i,
              ];
              
              const hasSpamTitle = spamTitlePatterns.some(p => p.test(prTitle));
              const hasMinimalDescription = prBody.length < 20;
              
              // Determine if it's spam
              if (matchesSpamPattern && !meaningfulChange) {
                isSpam = true;
                spamReasons.push('Only adding name/username to README without meaningful contribution');
              }
              
              if (hasSpamTitle && hasMinimalDescription && matchesSpamPattern) {
                isSpam = true;
                spamReasons.push('Minimal description with name-only changes');
              }
              
              // Additional check: very small diff (less than 3 lines added)
              const addedLineCount = addedLines.split('\n').length;
              if (addedLineCount <= 3 && matchesSpamPattern) {
                isSpam = true;
                spamReasons.push('Trivial change with only 1-3 lines added');
              }
            }
            
            core.setOutput('is_spam', isSpam);
            core.setOutput('spam_reasons', spamReasons.join('; '));
            
            return { isSpam, spamReasons };

      - name: Label and close spam PR
        if: steps.spam_check.outputs.is_spam == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const spamReasons = `${{ steps.spam_check.outputs.spam_reasons }}`;
            const prNumber = context.issue.number;
            const prAuthor = context.payload.pull_request.user.login;
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['invalid', 'spam', 'hacktoberfest-invalid']
            });
            
            // Add comment explaining why PR is rejected
            const comment = `## ⚠️ Invalid Pull Request Detected

Hello @${prAuthor}, thank you for your interest in contributing! However, this pull request has been automatically flagged and closed for the following reason(s):

**${spamReasons}**

### 🚫 This type of contribution is not accepted:
- Adding only your name/username to README or contributor lists
- Making trivial changes without meaningful improvements
- Low-effort contributions just for the sake of increasing PR counts

### ✅ What makes a valid contribution?

We welcome **meaningful contributions** such as:
- 🐛 Bug fixes with proper testing
- ✨ New features with documentation
- 📚 Improving documentation with substantial content
- ♻️ Code refactoring that improves quality
- 🎨 UI/UX improvements
- ✅ Adding tests for uncovered code
- 🔧 Fixing typos or improving clarity in multiple places

### 📖 How to contribute properly?

1. **Find a real issue** - Look for open issues labeled "good first issue" or "help wanted"
2. **Discuss first** - Comment on the issue before starting work
3. **Make meaningful changes** - Ensure your contribution adds real value
4. **Write a proper description** - Explain what you changed and why
5. **Test your changes** - Make sure everything works as expected

### 🎃 Hacktoberfest Participants

This PR has been labeled as \`hacktoberfest-invalid\`. Spam PRs can get you **banned from Hacktoberfest**. Please read the [Hacktoberfest Quality Standards](https://hacktoberfest.com/participation/#spam).

---

**Please read our contribution guidelines and submit a meaningful contribution instead.** We appreciate quality over quantity! 🙏

*This is an automated message. If you believe this is a mistake, please comment below and a maintainer will review.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
            
            // Close the PR
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              state: 'closed'
            });
            
            console.log(`Spam PR #${prNumber} has been labeled and closed.`);

      - name: Valid PR confirmation
        if: steps.spam_check.outputs.is_spam == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('✅ PR appears to be a valid contribution. Proceeding with normal review process.');